defmodule AshManyMany.Repo.Migrations.AddUsersAndOrganisations do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :email, :text, null: false
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:user_organisations, primary_key: false) do
      add :user_id,
          references(:users,
            column: :id,
            name: "user_organisations_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          primary_key: true,
          null: false

      add :organisation_id, :uuid, null: false, primary_key: true
    end

    create table(:organisations, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:user_organisations) do
      modify :organisation_id,
             references(:organisations,
               column: :id,
               name: "user_organisations_organisation_id_fkey",
               type: :uuid,
               prefix: "public",
               on_delete: :delete_all
             )
    end

    alter table(:organisations) do
      add :name, :text, null: false
    end

    create unique_index(:organisations, [:name], name: "organisations_unique_name_index")
  end

  def down do
    drop_if_exists unique_index(:organisations, [:name], name: "organisations_unique_name_index")

    alter table(:organisations) do
      remove :name
    end

    drop constraint(:user_organisations, "user_organisations_organisation_id_fkey")

    alter table(:user_organisations) do
      modify :organisation_id, :uuid
    end

    drop table(:organisations)

    drop constraint(:user_organisations, "user_organisations_user_id_fkey")

    drop table(:user_organisations)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    drop table(:users)
  end
end